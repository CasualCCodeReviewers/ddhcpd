#!/usr/bin/env bash

# Network test setup helper
# This script will construct a number of network namespaces and
# then create veth-pairs. One pair for server connections and another for
# client commands. Inside of the netns the client interface is named "client0"
# and the server interface "server0".


NUM_OF_INTERFACE=$(cat /tmp/ddhcp-netns-count 2>/dev/null)
NUMBER_OF_CLIENT_INTERFACES=2

function isNumber(){
  local NUMBER=$1
  re='^[0-9]+$'
  if ! [[ $NUMBER =~ $re ]] ; then
    return 1
  else
    return 0
  fi
}

function buildInterfaces() {
  local IDX=$1
  local NS_NAME="ddhcpd$1"
  # create interfaces for s2s and s2c communication
  ip link add name "srv${IDX}" type veth peer name "server0"
  ip link add name "clt${IDX}" type veth peer name "client0"
  # create netns for server
  ip netns add "${NS_NAME}"
  #  move interfaces into server netns
  ip link set dev "server0" netns "$NS_NAME"
  ip link set dev "client0" netns "$NS_NAME"
  # bring up interfaces
  ip link set dev "srv${IDX}" up
  ip netns exec "$NS_NAME" ip link set dev "server0" up
  ip link set dev "clt${IDX}" up
  ip netns exec "$NS_NAME" ip link set dev "client0" up
  # configure interfaces in server netns
  ip netns exec "$NS_NAME" ip a a 10.0.0.1/16 dev client0
  ip netns exec "$NS_NAME" ip link set dev lo up
  # network bridge for s2c communication
  ip link add name br-clt${IDX} type bridge #nf_call_iptables 0 nf_call_ip6tables 0 nf_call_arptables 0
  ip link set dev "clt${IDX}" master "br-clt${IDX}"
  ip link set dev "br-clt${IDX}" up
  # construct netns for each client and attach interfaces to the s2c bridge
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip link add name "clt${IDX}-${idc}" type veth peer name "clb${IDX}-${idc}"
    # create netns for dhcp client
    ip netns add "dhcp-${IDX}-${idc}"
    # move interface into netns and attach to bridge bridge
    ip link set dev "clb${IDX}-${idc}" master "br-clt${IDX}"
    ip link set dev "clt${IDX}-${idc}" netns "dhcp-${IDX}-${idc}"
    # bring interfaces up
    ip netns exec "dhcp-${IDX}-${idc}" ip link set dev "clt${IDX}-${idc}" up
    ip link set dev "clb${IDX}-${idc}" up
  done
  # allow forward on bridge
  iptables -I FORWARD 1 -p all -i "br-clt${IDX}" -j ACCEPT
}

function destroyInterfaces(){
  local IDX=$1
  local NS_NAME="ddhcpd$1"
  ip netns delete "${NS_NAME}"
  ip link delete dev "srv${IDX}"
  ip link delete dev "clt${IDX}"
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip netns del "dhcp-${IDX}-${idc}"
    ip link delete dev "clb${IDX}-${idc}"
  done
  iptables -D FORWARD -p all -i "br-clt${IDX}" -j ACCEPT
  ip link delete dev br-clt${IDX}
}

function roamClientInterfaces() {
  local IDX=$1
  local IDT=$2
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip link set dev "clb${IDX}-${idc}" master "br-clt${IDT}"
  done
}

function startServer() {
  local NS_NAME="ddhcpd$1"
  shift
  echo ip netns exec "${NS_NAME}" $@
  ip netns exec "${NS_NAME}" $@
}

function startDHCPClients() {
  local IDX="$1"
  shift
  local args="$@"
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ( ip netns exec "dhcp-${IDX}-${idc}" dhclient -4 -nw -d \
        -pf "/tmp/clt${IDX}-${idc}.pid" \
        -lf "/tmp/clt${IDX}-${idc}.lease" \
        $args \
        "clt${IDX}-${idc}" > "/tmp/dhclient-${IDX}-${idc}.log" 2>&1
    ) &
  done
}

function stopDHCPClients() {
  local IDX="$1"
  shift
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ( ip netns exec "dhcp-${IDX}-${idc}" dhclient -r \
        -pf "/tmp/clt${IDX}-${idc}.pid" \
        -lf "/tmp/clt${IDX}-${idc}.lease" >> "/tmp/dhclient-${IDX}-${idc}.log" 2>&1
      mv "/tmp/clt${IDX}-${idc}.lease" "/tmp/clt${IDX}-${idc}.lease.old"
    ) &
  done
}

function network-init() {
  local NUMBER_OF_INSTANCES="$1"

  echo -n "Building Network Namespaces "
  for index in $(seq 0 ${NUMBER_OF_INSTANCES}); do
    buildInterfaces "${index}"
    echo -n "."
  done
  echo " done"
  echo "$NUMBER_OF_INSTANCES" > /tmp/ddhcp-netns-count

  echo -n "Building server bridge "
  ip link add name br-srv type bridge
  ip link set dev br-srv up
  for index in $(seq 0 ${NUMBER_OF_INSTANCES}); do
    ip link set dev "srv${index}" master "br-srv"
    echo -n "."
  done
  # allow forward on bridge
  iptables -I FORWARD -p all -i "br-srv" -j ACCEPT
  ip6tables -I FORWARD -p all -i "br-srv" -j ACCEPT
  echo " done"
}

function network-stop() {
  echo -n "Destroy server bridge "
  ip link delete dev "br-srv"
  # remove forward rules
  iptables -D FORWARD -p all -i "br-srv" -j ACCEPT
  ip6tables -D FORWARD -p all -i "br-srv" -j ACCEPT
  echo " done"

  echo -n "Destroy Network Namespaces "
  for index in $(seq 0 ${NUM_OF_INTERFACE}); do
    destroyInterfaces "${index}"
    echo -n "."
  done
  echo " done"
  rm /tmp/ddhcp-netns-count
}

function test_small(){
  # A test routine
  $0 net-init 1
  trap "pkill ddhcpd ; rm /tmp/ddhcpd-ctl* 2>&1 > /dev/null; $0 net-stop" EXIT
  # Start two daemons
  echo -n "Startup DDHCPD instances "
  ( $0 srv-start 0 ./ddhcpd -L -t 20 -b 2 -C /tmp/ddhcpd-ctl0 -c client0 -i server0 > /tmp/ddhcpd-0.log -H $(pwd)/example-hook.sh 2>&1 ; echo -n "." ) &
  ( $0 srv-start 1 ./ddhcpd -L -t 20 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 > /tmp/ddhcpd-1.log -H $(pwd)/example-hook.sh 2>&1 ; echo -n "." ) &
  echo " done"
  # Start some clients
  echo "Starting clients on realm 0 "
  startDHCPClients 0 -v
  while :; do
    # Let Clients get a first lease in realm 0
    sleep 60
    # Move Client Between Realms
    echo "Move Clients from Realm 0 to 1"
    roamClientInterfaces 0 1
    # Wait longer so clients refresh their lease in the other realm
    sleep 600
    # And Move them Back
    echo "Move Clients from Realm 1 back to 0"
    roamClientInterfaces 0 0
  done
}

function test_one(){
  # A test with two nodes each one client
  NUMBER_OF_CLIENT_INTERFACES=1
  $0 net-init 1
  echo -n "Startup DDHCPD instances"
  ( $0 srv-start 0 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl0 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-0.log -H $(pwd)/example-hook.sh 2>&1 ; echo -n "." ) &
  ( $0 srv-start 1 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-1.log -H $(pwd)/example-hook.sh 2>&1 ; echo -n "." ) &
  echo " done"
  startDHCPClients 0 -v
  startDHCPClients 1 -v
  while :; do
    sleep 60
  done
}

function test_full(){
  # This test consists of 5 ddhcpd daemons and 25 clients
  # A test routine
  NUMBER_OF_CLIENT_INTERFACES=5
  $0 net-init 4
  trap "pkill ddhcpd ; rm /tmp/ddhcpd-ctl* 2>&1 > /dev/null; $0 net-stop" EXIT
  # Start daemons
  echo -n "Startup DDHCPD instances"
  ( $0 srv-start 0 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl0 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-0.log 2>&1;) &
  ( $0 srv-start 1 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-1.log 2>&1;) &
  ( $0 srv-start 2 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-2.log 2>&1;) &
  ( $0 srv-start 3 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-3.log 2>&1;) &
  ( $0 srv-start 4 ./ddhcpd -L -s 2 -t 15 -B 300 -b 2 -C /tmp/ddhcpd-ctl1 -c client0 -i server0 -N 10.0.128.0/17 -o 54:4:10.0.0.1 -o 1:4:255.255.0.0 -o 51:4:0.0.1.44 > /tmp/ddhcpd-4.log 2>&1;) &
  echo " done"
  startDHCPClients 0 -v
  startDHCPClients 1 -v
  startDHCPClients 2 -v
  startDHCPClients 3 -v
  startDHCPClients 4 -v
  while :; do
    sleep 60
  done
}


if [[ "$(id -u)" != "0" ]] ; then
  echo "Error: Need root privileges"
  exit 1
fi

case "$1" in
  net-init)
    NUMBER_OF_INSTANCES="$2"
    isNumber "$NUMBER_OF_INSTANCES"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a number"
    fi
    network-init "$NUMBER_OF_INSTANCES"
    ;;
  net-stop)
    network-stop
    ;;
  srv-start)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    startServer "$INDEX" $@
    ;;
  clt-start)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    startDHCPClients "$INDEX" $@
  ;;
  clt-stop)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    stopDHCPClients "$INDEX" $@
  ;;
  test)
    case $2 in
      one) test_one ;;
      small) test_small ;;
      full) test_full ;;
    esac
    ;;
  *)
    echo "Usage: $0 <command> <parameter>"
    echo "where"
    echo " <command> is one of"
    echo " net-init  <#num>            - Initialize <#num> interface pairs and netns."
    echo " clt-start <index>           - Start $NUMBER_OF_CLIENT_INTERFACES clients for netns with <index>."
    echo " srv-start <index> <command> - Start <command> in netns with <index>."
    echo " net-stop                    - Destroy interface pairs and netns."
    echo " test                        - Run predefined test case. "
    ;;
esac


